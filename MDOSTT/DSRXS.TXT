       DEF  START
       DEF  REMAP

       REF  SET964
       REF  PASDAT,PABD00
*
       REF  PAGLST,PAGCNT
       REF  CYASTP       cya steprate/track for SECT3-P3
       REF  STPDRV,TRKDRV,VERWRT,CTLTYP,CTLBAS,LSTDRV
       REF  DRVMAP
       REF  INTMAP,SPPAG,SPPNT,RSMAP
       REF  PIOTYP,PIOTY2
       REF  STATAB
       REF  WS4000

       REF  TIPPWR,TIPLV2,TIPLV3,TIPENA      2.6, TIPI\HEADER [x6000]
       REF  TIPCRU,TIPPWL       4.17.2021 TIPI\HEADER [x6000]

       DEF  ABTKEY,MAP426
;;     DEF  DEFMAP       Removed 5.14.2022; remaps refactored 2021

       REF  SCSPWL       SCSI powerup linkage (SCSI2\POWERS)
       REF  IDEPWL       IDE powerup linkage (SCSI2\TIDE9S)
*
MODE   EQU  >1EF4
*
;;     AORG >2000

START  JMP  PWRUP        xop powerup via BL @>2000 in OSHEAD
       B    @SET964      ;>2002, dsr entry
       B    @INT964      ;>2006, interrupt entry
*
* POINTERS to user settable parameter blocks - DO NOT MOVE!
*
* 6.28.2022 These are hard-referenced, often with page offset.
*           This may be another place to front load CRU addresses for
*           the various devices. Further inspection needed.
*
       DATA STPDRV,DRVMAP  >200A,>200C  step rates, low-level drive mapping
       DATA VERWRT,INTMAP  >200E,>2010  verify on write, ramdisk header page
       DATA SPPAG,SPPNT    >2012,>2014  spooler page list, table to ^spooler
       DATA RSMAP          >2016        low-level rs232/pio redirection
       DATA STATAB         >2018        port configuation pointers
       DATA TRKDRV         >201A
       DATA LSTDRV         >201C
       DATA TRACK1         >201E
       DATA CTLTYP         >2020
       DATA CTLBAS         >2022
       DATA PIOTYP,PIOTY2  >2024,>2026
       DATA WS4000         >2028
HF1    DATA 0              >202A   HFDC CRU FOR GPL
M96SSS DATA 0              >202C   Used to be >F0F0; moved out of scratch

*
PWRUP  CLR  R4
PPWR00 MOV  R4,@RSMAP(R4)     restore low-level redirection to default
       INCT R4                ;6.28.22, what exactly is the redirection?
       CI   R4,10
       JLE  PPWR00
*
*** mjm, 12/94.  Added routine to clear SCSI workspace RAM page >E8
* might also put a nice little device check routine here, but let's not
*   get carried away just yet!  [MOVED TO SCSI2\POWERUP]
*
;       LI   R4,P_SCAC*256  >E800  3.17.2018, fixed mjm page hardcode
;      MOVB R4,@MAP96+5
;**     MOVB @PAGSC2+>2000,@MAP96+5 might need the offset for byte here
;      LI   R4,>A000
;SCSICL CLR  *R4+         Clear SCSI Buffer @ Page >E8 (also l8.hdr2-p2)
;      CI   R4,>C000
;      JL   SCSICL

       MOVB @PAGD6+>2000,@MAP96+3            ;Hard drive >6000 space
;                                            ;needed to store SCSICRU
       MOVB @>F110,@SCSPWLPAGE+1
       MOVB @SCSPWLPAGE,@>F110
       BLWP @SCSPWL                          ;call SCSI powerup
       BLWP @IDEPWL                          ;call IDE powerup
;      blwp @rampwl  in theory, could use CFG detection to check ramdisk.
       MOVB @SCSPWLPAGE+1,@>F110

*
* Clear >A000->DFFF (dsr buffers including those in l8.layout)
*
* The /4a mode powerup in hdr2/p2 does this one page at a time!
*      Can we consolidate the two? That is the question.
*
CLRDB1 LI   R4,>A000
       MOVB @PAGD1+>2000,@MAP96+5            +>2000 to allow for load map
       MOVB @PAGD2+>2000,@MAP96+6            +>2000 to allow for load map
PWRUP1 CLR  *R4+                             different than run-map
       CI   R4,>E000
       JL   PWRUP1
*
* Number of file buffers. See L8.COMPAR; l8.layout (numful,buf1..buf10)
*
       MOVB @H0A,@NUMFIL     **** THIS MUST BE EXECUTED WITH PAGE
*                            ****  "PAGD1" MAPPED AT >A000!!!!

       MOVB @MAP96+2,@M96SSS     ;2.9.21, @>F0F0 Scratch/sysreg see end cya

; 2.9.202,  Find and powerup HFDC ONLY. HD.FLPPRM:PRWIN0
;           PRWIN0 skips CRU >1200 to avoid SCS (WDS) mismatch (could test SCS)
;           Sets up dsr, gets HFDC floppy parms, checks for emulate. DSONWIN,etc
;           NOTE: If another DSR with WDS is found, OS will mistake it for hfdc
;
;2.14.2021, Force remap to execute regardless of HFDC identification /flag
;
       MOV  R11,@PWRUP7+2     restore R11 after RS232 powerup - jhw
       MOVB @PAGD6+>2000,@MAP96+3
       CLR  R12               For REMAP; ensure no false HFDC test 2.14.2021
       C    @>6000,@WDS2TX+>2000   winds1-s header 'HD'
       JNE  WINPRT            no HFDC code installed (or HFDC OFF called)
       MOV  @>6002,R1
       CLR  @>601E           *CLEAR SCSI ACCESS FLAG.
;;;    MOV  @>6016,@HF1       HFDC CRU ADDRESS  local hf1, not used

       BL   *R1
       NOP

;
; 5.14.2022 Retain page map for TIPCRU but disable duplicate powerup. This
;           ensures the XOP and DSR are powered up by OSHEAD before the DSR.
;
;           @REMAP expects to see the TIPI DSR at MAP96+3

WINPRT MOVB @PAGD7+>2000,@MAP96+3   ;TIPI visible  @ >6000
;     bl   @tippwl      DISABLED in favor of XOP-based powerup (OSHEAD)
;
       LI   R0,DPAG1*256      dsr page
       MOVB R0,@MAP96+2       fix >4000 page for DRVMAP

       BL   @REMAP            reassign floppy drive defaults (hfdc|fdc|tipi)
;                             R12 must be preserved for hfdc test below!

       MOVB @PAGD0+>2000,@MAP96+3     next up, Floppy controller
       MOVB @HBA+>2000,@MAP96+6       map in bus/card(s) here 10-17-89

;6.28.2022, see remap for ctltyp flag setting
;;     CI   R12,>1100    Was the HFDC @>1100? (R12==0 if hfdc test skipped)
;;     JEQ  MS5          yeah... skip this part, otherwise, get switches for1100

       MOV  @CTLTYP,R5   check for flag      6.28.22
       JLT  MS5          >FF (-1) is hfdc or tipi

*--------------------------------------------------------
* FLOPPY CONTROLLER
*    determine controller type, drive types, and step rates
*
* CTLTYP:  0=TI, 1=Myarc, 2=CC (3=Tip?) Default=Myarc/1
*           -1 for TIPI
*
* 6.28.2022, updated floppy detection to flag no FDC via CTLTYP
*
       LI   R5,TRKDRV    tracks (40/80)
       LI   R6,STPDRV    Step rate
*
       MOV  @H2828,*R5        assume 40 track for 1,2
       MOV  @H2828,@2(R5)     3,4
*
       MOV  @H0202,*R6        assume step rates
       MOV  @H0202,@2(R6)
       MOVB @H00+>2000,@VERWRT  and turn off(?) write verification
       SETO @LSTDRV             ??
*
       LI   R12,>1100         point to floppy controller
       LDCR @H00+>2000,8      clear first 8 cru bits
       SBO  0                 turn on card

;6-28-2022, test for a controller at >1100
       CB   @>C000,@HAA+>2000 is there an eprom >AA header?
       JEQ  CHKMY1            yes. Go figure out what type of card it is
       SETO @CTLTYP           NO. So we don't have an FDC at this point
       JMP  MS5                   exit floppy detection

; (1) Check for Myarc card by detecting RAM in the >5000-5ff0 page
CHKMY1 LI   R2,>D000
       MOV  *R2,R0
       INV  *R2
       MOV  *R2,R1
       INV  *R2          restores value, if RAM
       C    R0,R1        compare
       JEQ  NOTMYR       nope, not a Myarc card w/ram

****Set Myarc FDC Configuration:
       MOV  @H9FF1,@CTLBAS
       MOVB @H01,@CTLTYP
*
       C    @>C00A,@H4010     is it an 80 track eprom?
       JNE  NOTM80
       CLR  *R6               yes, reset step rates
       CLR  @2(R6)
       LI   R1,TRKDRV         test DIP for 40/80 track operation
       AI   R12,>000E
MS1    TB   0
       JEQ  MS2
       MOVB @H50,*R1          80 track
MS2    INC  R1                40 track (remember, we defaulted above)
       DECT R12
       CI   R12,>1106
       JH   MS1
       LI   R12,>1100
       TB   2
       JEQ  MS5
       MOVB @H01,@VERWRT
MS5    JMP  PWREX             complete
*
NOTM80 LI   R1,STPDRV         NOT 80 track EPROM, so the DIP is step rates
       AI   R12,>000E
MSA1   TB   0                 0=GND=20 MS
       JNE  MSA2
       MOVB @H00+>2000,*R1    set step
MSA2   INC  R1
       DECT R12
       CI   R12,>1106
       JH   MSA1
       LI   R12,>1100
       JMP  PWREX             R12 must contain valid card! complete
*
* here, check to see if ti or corcrap
*
NOTMYR MOV  @H9FF0,@CTLBAS
       MOVB @H00+>2000,@CTLTYP
       SBO  11                flip rom bank (only possible w/cc)
       CB   @>C000,@HAA+>2000 standard header this bank?
       JEQ  PWREX             yes,it's a ti card (use 40 track, step setting=2)
**
* corcrap, set step rates...  (40 track only; setDSK can override)
*
       SBZ  11                no, reset Corcomp ROM bank; fixes rompage/gencfg
       MOVB @H02,@CTLTYP
       CLR  R0
       AI   R12,>22
       STCR R0,8              get the switches
       LI   R12,>1100
*
       MOVB R0,R1
       MOVB R0,R2
       SRL  R1,1
       SRL  R2,4
       ANDI R1,>0100
       ANDI R2,>0200
       SOCB R1,R2
       MOVB R2,*R6       step rate drive 1 (DS0)
*
       MOVB R0,R1
       MOVB R0,R2
       SRL  R1,4
       SRL  R2,5
       ANDI R1,>0100
       ANDI R2,>0200
       SOCB R1,R2
       MOVB R2,@1(R6)    drive 2 (DS1)
*
       MOVB R0,R1
       MOVB R0,R2
       SRL  R1,3
       SRL  R2,6
       ANDI R1,>0100
       ANDI R2,>0200
       SOCB R1,R2
       MOVB R2,@2(R6)    drive 3 (DS3)
*
       MOVB R0,R1
       MOVB R0,R2
       SRL  R1,2
       SLA  R2,1
       ANDI R1,>0100
       ANDI R2,>0200
       SOCB R1,R2
       MOVB R2,@3(R6)    drive 4 (DS4)
*---end floppy powerup

; Be sure R12 contains valid CRU when we add TIPI, etc

PWREX  SBZ  0            Must turn off the card!
*
* 5.1.98, Override floppy step/settings with CYA settings IF available.
*
       LI   R1,CYASTP    CYA step/track rates [track1/step1,track2/step2,..4]
       LI   R2,STPDRV    Step Rates
       LI   R5,TRKDRV    Tracks
CYAPP2 MOV  *R1+,R6      get values [track#/step#]
       JEQ  CYAP1        0? skip this one
       MOVB R6,*R5       !0, set TRACK
       SWPB R6           swap
       MOVB R6,*R2       set STEP RATE
CYAP1  INC  R2           next step
       INC  R5           next track
       CI   R1,STPDRV    end of cya table?
       JNE  CYAPP2       not yes

       MOVB @M96SSS,@MAP96+2  ;2.9.2021
;;     MOVB @>F0F0,@MAP96+2
*

; Reset INTERNAL RAMDISK header page
;   The two bytes are updated by the 'RAMDISK=' command.
;   See CLI.BATCMDS: AUTR80 for offset >A010 [>2010] earlier in this file.
;
       CLR  @INTMAP

;
; Set spooler (RSBUFFERS)
;
       LI   R1,ISPOOL
       LI   R2,SPPNT
       MOV  @2(R2),R2         get pointer to 1st spooler
PWREX0 CLR  *R2+              (2nd index points to first rs table!)
       MOV  *R1+,*R2+         (RS1IN)
       CI   R1,ISPOLD
       JL   PWREX0
*
* figure out what sort of rs232 cards we have here...
*
* 05.13.94 Jeff White -- removed DSR-dependent RS232 check
*                        DSR-validation byte >AA still required, but
*                          could be removed
*                        inserted powerup into check
*
       LI   R12,>1300
       LI   R1,PIOTYP
       MOV  @STATAB,R5        get pointer
       AI   R5,-10            adjust for all 4 ports
NXTPIO SBO  0
       CLR  R0                assume MYARC
       SETO *R1
       CB   @>C000,@HAA+>2000
       JNE  GONE1             no card here
       SBO  7                 turn on LED (TI or Corcrap)
       TB   7                 test if ON
       SBZ  7                 turn it OFF (does not affect status bits)
       JNE  PORT1             must be MYARC
       TB   7                 test if OFF
       JEQ  PORT1             must be MYARC
       INCT R0                now assume Corcrap
*
* jhw: place CorCrap PIO powerup routine here -- compatible with TI PIO
*
       SBO  2                 disable TI/CC PIO strobe
       SBZ  1                 set TI/CC PIO to OUTPUT mode
       MOVB @>D000,@TESCH1    get BYTE @>5000 on the card
       INV  @>D000            invert whatever is there
       CB   @>D000,@TESCH1    are the two equal?
       JEQ  PORT1             no, must be TI - ROM cannot be changed!

*      MOVB @>C000,@>D000     write a byte, but do not strobe
*      CB   @>C000,@>D000     test what is in OUTPUT register
*      JNE  PORT1             must be Corcrap
       MOVB R0,@>D000         null to OUTPUT register
       DEC  R0                hope it is TI
PORT1  MOV  R0,*R1
*
*
* 05.13.94 -- Jeff White
* reset the rs232 card serial ports
*
; 6.28.2022 Possible error. SPATAB is RS1,RS2,P1,RS3,RS4,P2
;           but the routine does not skip to RS3.
;
PWRUP5 AI   R12,>0040         1st port this card
PWRUP6 BL   @PWRUP8
       SBO  20                timer interrupt on for PIO(/1 or /3)
       AI   R12,>0040         2nd port this card
       BL   @PWRUP8
       AI   R12,->0080        restore base address
GONE1  SBZ  0
       LI   R1,PIOTY2
       AI   R12,>0200
       CI   R12,>1500
       JEQ  NXTPIO
PWRUP7 B    @0

*
PWRUP8
       SBO  31
       AI   R5,22             point to next port data
       LDCR *R5,8             load control register
       INCT R5
       LDCR @ITIM,8           interval timer
*      SBZ  13                cleared when interval timer loaded - jhw
       LDCR *R5,12            load bps rate
       SBO  19                transmit interrupt on
       RT

SCSPWLPAGE DATA P_SCSI*256    ;6.19.2022 for powerup
TESCH1 DATA 0
H9FF1  DATA >9FF1
H9FF0  DATA >9FF0
H4010  DATA >4010
H2828  DATA >2828
H0202  DATA >0202
H02    EQU  H0202
*
ITIM   BYTE 78,0              5ms for interval timer for PIO
*
H03    BYTE >03
H0A    BYTE >0A
H0D    BYTE >0D
H50    BYTE >50
H01    BYTE >01
*
PAGER  DATA PAGLST
*
ABTKEY MOV  R11,@ABTDAT  ;Check for BREAK key, L8.RSD2-P: CKABRT
       LI   R12,MODE     ;
       SBZ  0
       BL   @>20
       STST R11
       LI   R12,MODE
       SBO  0
       B    @0
ABTDAT EQU  $-2
*


**** WAIT **** HOW *** DO *** WE ** KNOW ** THIS ** IS ** OK ? ? ?

;;     AORG >2380             unused PAD ram

* What if above code exceeds >380 bytes?
;
; Not only that, later we aorg based on >0400 +>2000!  NIGHTMARE CODE>

********************************************************************************
*  REMAP Devices -  J.G.SCHROEDER 09/26/92
*
* Original table shifted offset 0 for emulate. Confirm use of @DRVMAP(0)
*    0 1 2 3 4 5 6 7 E F      default map
*
* IN: R12, from FLPPRM hfdc search (R12==0 before hfdc check)  MUST PRESERVE
*     R1,  from FLPPRM emulate 0=none; 1=found
*
* >>> Remap expects TIPI page at MAP96+3 for  reference @TIPCRU!!!
*      HFDC/SCSI/RamHD page >6000 can't be mapped in at same time, so we cannot
*      test the >6000 area unless we combine CRU's into one place
*
* 6.28.2022 Changed logic for hfdc/fdc. Set CTLTYP -1 for non FDC.
*           We can always clear it later, if necessary. See powerup.

REMAP  LI   R3,DRVMAP    ref'd  L8.SECT2-P
       INC  R3           start at proper offset

;4.17.21, TIPI maps dsk1-4 if card at >1100
       SETO @CTLTYP      set floppy controller to non-FDC (-1)

       LI   R4,HTIPDD         check for tipi first
       C    @TIPCRU,@CR1100   tipi page must be at >6000 for this to work
       JEQ  REMAP1

;      LI   R4,H0102     FDC default
;      CI   R12,>1100    hfdc at >1100? see flpprm
;      JNE  REMAP1         no
;      LI   R4,H0A0B       yes,default to hfdc floppy
;

       LI   R4,H0A0B     HFDC floppy default
       CI   R12,>1100    R12 is set in hfdc powerup
       JEQ  REMAP1
       CLR  @CTLTYP      reset flag
       LI   R4,H0102     FDC default

REMAP1 MOVB *R4+,*R3+    set dsk1-4 remaps
       MOVB *R4+,*R3+
       MOVB *R4+,*R3+
       MOVB *R4+,*R3+

*********************************************
* 9.11.2009 - CYA Remap Override modification - per drive!
*      If the byte in the table is 0, existing map is retained at powerup
*      Otherwise, the CYA table remap is used
CYAORM LI   R2,CYAREMAP
       LI   R3,DRVMAP   (first byte is emulation; not sure if used)
       LI   R4,9
CYAREMAPNEXT
       INC  R3
       MOVB *R2,*R2
       JEQ  CYAREMAPSKIP
       MOVB *R2,*R3
CYAREMAPSKIP
       INC  R2
       DEC  R4
       JNE  CYAREMAPNEXT
       RT
CYAREMAP DATA 0,0,0,0,0  DRIVES 1-9 FOR CYA REMAP
*
H0102  DATA >0102        standard floppy
H0304  DATA >0304
H0A0B  DATA >0A0B        HFDC floppy
H0C0D  DATA >0C0D
CR1100 DATA >1100        For comparison with remaps/CRU
HTIPDD BYTE 23,24,25,26  TIPI floppy remaps
       BYTE 0

       END
