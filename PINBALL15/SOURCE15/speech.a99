*********************************************************************************
*
* Send speak external command and first 8 bytes
*
* r0: index of speech data
*
; This is the Geneve version.
;
   .ifne Geneve9640
savettr1 data 0   ;7.2.2022
;savettr2 data 0
   .endif 
  
speak:
       .proc
       mov  @speech_detected,r1
       jeq  speak_1
       mov  @speech_counter,r2         ; Get counter
       jgt  speak_1                    ; Skip if already speaking
       sla  r0,2                       ; index * 4

      ai  r0,speech_bank_base  ;conditional equate 6000/4000

    .ifeq Geneve9640   ;7.11.2022 EQ is /4a
       seto @speech_bank     ;/4a
       mov  *r0+,@speech_addr  
    .else

       mov r1,@savettr1  ;/9640
        li  r1,speech_bank
        blwp @genevemap_r1	;set bank
        mov  *r0+,r1
        ai   r1,-Geneve_bank_delta  ;adjust to >4000 bank
        mov  r1,@speech_addr
       mov  @savettr1,r1
    .endif

;;       ai    r0,>4000    ;Geneve uses >4000 for the banking, not >6000
;;       li  r1,speech_bank
;;       andi r1,>00FF
;;       srl  r1,1	;divide by 2
;;       ai   r1,>8200+8	;location of our page map
;;       movb *r1,@>8002   ;set the mapper to our page
;;       mov  @savettr1,r1

;--------end of bank set
;;;;;       mov  *r0+,@speech_addr  /4a
     
;;       mov r1,@savettr1		;indice is an address! adjust to >4000
;;         mov  *r0+,r1
;;         ai   r1,->2000
;;         mov  r1,@speech_addr
;;       mov  @savettr1,r1
;----

; start common routine
       mov  *r0,@speech_counter
*      Speak external command
       movb @h60,@spchwt
       bl   @delay_12us
*      Send first 16 bytes
       bl   @send_bytes_to_speech
       bl   @send_bytes_to_speech
*      Lower music/sfx volume
       li   r0,attenuation_during_speech*256
       mov  r0,@extra_attenuation
speak_1:
       .endproc
*// speak

*********************************************************************************
*
* Send up to 8 bytes to the speech synthesizer
*
speech_player:
       .proc
       mov  @speech_detected,r0
       jeq  speech_player_4
       mov  @speech_counter,r2         ; Get counter
       jeq  speech_player_4            ; Nothing to do
*      Check speech status
       bl   @speech_read_pad

       movb @speech_status,r0

       coc  @buffer_low,r0             ; Is speech buffer half empty?
       jne  speech_player_2
*      Speech buffer low
       bl   @send_bytes_to_speech
       jmp  speech_player_4


speech_player_2:

       movb @speech_status,r0

       coc  @talking,r0                ; Talking?
       jne  speech_player_3
       coc  @buffer_empty,r0           ; Is speech buffer empty?
       jne  speech_player_4
speech_player_3
       clr  @speech_counter
       clr  @extra_attenuation         ; Normal music/sfx volume
speech_player_4:
       .endproc
*// speech_player

*********************************************************************************
*
* Send bytes to speech synth
*
send_bytes_to_speech:

;;       seto @speech_bank
;-----------------
;;       mov r1,@savettr1
;;       li  r1,speech_bank
;;       andi r1,>00FF
;;       srl  r1,1	;divide by 2
;;       ai   r1,>8200+8	;location of our page map
;;       movb *r1,@>8002   ;set the mapper to our page
;;       mov  @savettr1,r1
;---------

    .ifeq Geneve9640
 
      seto @speech_bank
 
    .else

       mov r1,@savettr1  ;/9640
        li  r1,speech_bank
        blwp @genevemap_r1	;set bank
       mov  @savettr1,r1

    .endif
;//end condition

       mov  @speech_addr,r1            ; Get speech data address
       mov  @speech_counter,r2         ; Get counter
       ci   r2,8                       ; More than 8 bytes left?
       jle  send_bytes_to_speech_1     ; No - jump
       li   r2,8                       ; Yes - send 8
send_bytes_to_speech_1:
       movb *r1+,@spchwt               ; Send a byte
       dec  @speech_counter
       dec  r2
       jne  send_bytes_to_speech_1
       mov  r1,@speech_addr            ; Save the new address
       mov  @speech_counter,r2
       jgt  send_bytes_to_speech_2
       clr  @extra_attenuation           ; Normal music/sfx volume
send_bytes_to_speech_2:
       rt
*// send_bytes_to_speech

*********************************************************************************
*
* Check if the Speech Synthesizer is attached
*
speech_check:
       .proc
       clr  r0                         ; Location 0
       bl   @load_speech_address       ; Load addeess
       bl   @delay_42us
       movb @h10,@spchwt
       bl   @delay_12us
       bl   @speech_read_pad           ; Read the byte
       cb   @speech_status,@hAA        ; Is is >AA?
       jeq  speech_check_1             ; Yes. The peripheral is attached
*      Not there
       clr  @speech_detected    ;7.9.2022, $$$ TEST $$$
       jmp  speech_check_2
*      There
speech_check_1:
       seto @speech_detected
speech_check_2:
       .endproc
*// speech_check

*********************************************************************************
*
* Load address
*
* r0: address
*
* Uses rO, r1, and r2
*
load_speech_address:
       li   r2,4
load_speech_address_1:
       src  r0,4
       mov  r0,r1
       src  r1,4
       andi r1,>0F00                   ; Pick off four bits
       ori  r1,>4000                   ; Make it >4X
       movb r1,@spchwt
       dec  r2                         ; Do it four times
       jne  load_speech_address_1
       li   r1,>4000                   ; Write the >40
       movb r1,@spchwt
       rt
*// load_speech_address

*********************************************************************************
*
* 12 us delay
*
delay_12us:
       nop                             ; Short delay
       nop
       rt
*// delay_12us

*********************************************************************************
*
* 42 us delay
*
delay_42us:
       li   r1,10                      ; Long delay after address set up
delay_42us_1:
       dec  r1
       jne  delay_42us_1
       rt
*// delay_42us

*********************************************************************************
*
* Speech status read routine code, must be copied to scratchpad
*
speech_read:
       movb @spchrd,@speech_status
       nop
       nop
       nop
       rt
speech_read_length:
       equ $-speech_read
*// speech_read

*********************************************************************************
*
* Copy speech status read routine code to scratchpad
*
copy_speech_read_to_pad:
       li   r0,speech_read
       li   r1,speech_read_pad
       li   r2,speech_read_length
copy_speech_read_to_pad_1:
       mov  *r0+,*r1+
       dect r2
       jne  copy_speech_read_to_pad_1
       rt
*// copy_speech_read_to_pad

**
* Constants
talking:
       data >8000                      ; Talking
buffer_low:
       data >4000                      ; Buffer low
buffer_empty:
       data >2000                      ; Buffer empty
h10    byte >10
h60    byte >60
hAA    byte >aa

       even
